"""
1. 그래프란?
Graph는 node(vertex)와 edge로 구성됨.
두 노드가 간선으로 연결된 경우, 두 노드는 인접하다(adjacent)고 표현함.

2. 그래프의 표현방식
인접 행렬(adjacency matrix): 2차원 배열의 (i, j) 성분을 이용하여 i번째 노드와 j번째 노드의 연결관계를 나타냄.
인접 리스트(adjacency list): 리스트로 그래프의 연결 관계를 표현함.
2-1. 메모리 관점
인접 행렬 방식은 모든 노드간의 연결 관계를 저장하므로, 노드 개수가 많을수록 메모리가 불필요하게 낭비됨.
반면 인접 리스트 방식은 연결된 노드간의 연결 관계만을 차례대로 연결하여 저장하므로 메모리를 효율적으로 사용함.
2-2. 두 노드 간의 연결관계 확인(접근) 속도: 노드 n개로 구성된 graph
인접 행렬: O(1)
인접 리스트: O(n)
"""
INF = 987654321

print('1. 인접 행렬을 이용한 그래프 표현')
graph = [
    [0, 7, 5],
    [7, 0, INF],
    [5, INF, 0]
]

print(graph)

print('2. 인접 리스트를 이용한 그래프 표현')
graph = [[] for _ in range(3)]

# 노드 0에 연결된 노드 정보 저장(노드, 거리)
graph[0].append((1, 7))
graph[0].append((2, 5))

#노드 1에 연결된 노드 정보 저장(노드, 거리)
graph[1].append((0, 7))

#노드 2에 연결된 노드 정보 저장(노드, 거리)
graph[2].append((0, 5))

print(graph)

"""
특정 노드와 연결된 모든 인접 노드를 순회해야 하는 경우, 인접 리스트 방식이 인접 행렬 방식에 비해 메모리 효율적이다.
"""